<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ontology Visualization</title>
    <link rel="stylesheet" href="{{ url_for('ontology_editor.static', filename='css/editor.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            color: #333;
            background-color: #f7f7f7;
        }
        
        .container {
            display: flex;
            height: 100vh;
        }
        
        .sidebar {
            width: 250px;
            background-color: #2c3e50;
            color: white;
            padding: 15px;
            overflow-y: auto;
        }
        
        .main-content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
        }
        
        .header h1 {
            margin: 0;
            color: #2c3e50;
            font-size: 24px;
        }
        
        .controls {
            margin-top: 15px;
        }
        
        .btn {
            padding: 8px 15px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .btn:hover {
            background-color: #2980b9;
        }
        
        .btn-group .btn {
            margin-right: 5px;
        }
        
        .view-controls {
            margin-bottom: 15px;
        }
        
        .visualization-container {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            min-height: 600px;
        }
        
        /* Visualization-specific styles */
        .node {
            cursor: pointer;
        }
        
        .node circle {
            fill: #fff;
            stroke: steelblue;
            stroke-width: 3px;
        }
        
        .node text {
            font: 12px sans-serif;
        }
        
        .link {
            fill: none;
            stroke: #ccc;
            stroke-width: 2px;
        }
        
        .type-filter {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-bottom: 15px;
        }
        
        .filter-btn {
            padding: 5px 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.9em;
        }
        
        .filter-btn.active {
            background-color: #3498db;
            color: white;
            border-color: #3498db;
        }
        
        /* Color coding for entity types */
        .node-bfo circle {
            fill: #f5f5f5;
            stroke: #5D4037;
        }
        
        .node-bfo text {
            fill: #5D4037;
        }
        
        .node-bfo-aligned circle {
            fill: #f5f5f5;
            stroke: #795548;
        }
        
        .node-root circle {
            fill: #f5f5f5;
            stroke: #333;
            stroke-width: 4px;
        }
        
        .node-non-bfo circle {
            fill: #f5f5f5;
            stroke: #2196F3;
        }
        
        .node-type-Role circle {
            fill: #E3F2FD;
            stroke: #1565C0;
        }
        
        .node-type-Condition circle {
            fill: #E8F5E9;
            stroke: #2E7D32;
        }
        
        .node-type-Event circle {
            fill: #FFF3E0;
            stroke: #EF6C00;
        }
        
        .node-type-Action circle {
            fill: #F3E5F5;
            stroke: #6A1B9A;
        }
        
        .node-type-Resource circle {
            fill: #FFEBEE;
            stroke: #C62828;
        }
        
        .tooltip {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 8px;
            border-radius: 4px;
            pointer-events: none;
            max-width: 300px;
            z-index: 100;
            font-size: 13px;
        }
        
        .legend {
            margin-top: 20px;
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            margin-right: 15px;
        }
        
        .legend-color {
            width: 16px;
            height: 16px;
            margin-right: 6px;
            border-radius: 50%;
            border-width: 2px;
            border-style: solid;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="sidebar">
            <h2>Ontology Explorer</h2>
            <div class="controls">
                <h3>Visualization Settings</h3>
                <p>Adjust the view and filtering options to explore the ontology</p>
                <div class="control-group">
                    <label>Zoom Level</label>
                    <input type="range" min="0.5" max="2" step="0.1" value="1" id="zoom-control">
                </div>
                <div class="control-group">
                    <label>Tree Depth</label>
                    <select id="depth-control">
                        <option value="1">Level 1</option>
                        <option value="2">Level 2</option>
                        <option value="3" selected>Level 3</option>
                        <option value="4">Level 4</option>
                        <option value="all">All Levels</option>
                    </select>
                </div>
                <div class="control-group">
                    <button class="btn" id="expand-all-btn">Expand All</button>
                    <button class="btn" id="collapse-all-btn">Collapse All</button>
                </div>
            </div>
        </div>
        <div class="main-content">
            <div class="header">
                <h1>Ontology Visualization</h1>
                <div class="btn-group">
                    <button class="btn" id="back-to-editor-btn">Back to Editor</button>
                    <button class="btn" id="refresh-btn"><i class="fas fa-sync-alt"></i> Refresh</button>
                </div>
            </div>
            
            <div class="view-controls">
                <button class="btn active" id="hierarchical-view-btn">Hierarchical View</button>
                <button class="btn" id="categorized-view-btn">Entity Type View</button>
            </div>
            
            <div class="type-filter">
                <span>Filter by Type: </span>
                <button class="filter-btn active" data-type="all">All</button>
                <button class="filter-btn" data-type="Role">Roles</button>
                <button class="filter-btn" data-type="Condition">Conditions</button>
                <button class="filter-btn" data-type="Resource">Resources</button>
                <button class="filter-btn" data-type="Event">Events</button>
                <button class="filter-btn" data-type="Action">Actions</button>
                <button class="filter-btn" data-type="bfo">BFO Classes</button>
            </div>
            
            <div class="visualization-container">
                <div id="visualization-svg-container"></div>
            </div>
            
            <div class="legend">
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #f5f5f5; border-color: #333;"></div>
                    <span>Root</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #f5f5f5; border-color: #5D4037;"></div>
                    <span>BFO</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #E3F2FD; border-color: #1565C0;"></div>
                    <span>Role</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #E8F5E9; border-color: #2E7D32;"></div>
                    <span>Condition</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #FFEBEE; border-color: #C62828;"></div>
                    <span>Resource</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #FFF3E0; border-color: #EF6C00;"></div>
                    <span>Event</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #F3E5F5; border-color: #6A1B9A;"></div>
                    <span>Action</span>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Global variables
        let ontologyHierarchy = null;
        let currentView = 'hierarchical';
        let currentFilter = 'all';
        let maxDepth = 3;
        let tooltip = null;
        
        // Initialize when document is ready
        document.addEventListener('DOMContentLoaded', function() {
            // Create tooltip
            tooltip = d3.select("body").append("div")
                .attr("class", "tooltip")
                .style("opacity", 0);
            
            // Get ontology ID from URL
            const ontologyId = '{{ ontology_id }}';
            
            // Initialize event handlers
            initializeControls();
            
            // Load the ontology data
            loadOntologyHierarchy(ontologyId);
        });
        
        function initializeControls() {
            // View type toggle
            document.getElementById('hierarchical-view-btn').addEventListener('click', () => {
                switchViewType('hierarchical');
            });
            
            document.getElementById('categorized-view-btn').addEventListener('click', () => {
                switchViewType('categorized');
            });
            
            // Filter buttons
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const filterType = btn.getAttribute('data-type');
                    filterByType(filterType);
                    
                    // Update active state
                    document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                });
            });
            
            // Depth control
            document.getElementById('depth-control').addEventListener('change', (e) => {
                const value = e.target.value;
                maxDepth = value === 'all' ? Infinity : parseInt(value);
                redrawVisualization();
            });
            
            // Zoom control
            document.getElementById('zoom-control').addEventListener('input', (e) => {
                const zoomLevel = parseFloat(e.target.value);
                applyZoom(zoomLevel);
            });
            
            // Expand/collapse buttons
            document.getElementById('expand-all-btn').addEventListener('click', expandAll);
            document.getElementById('collapse-all-btn').addEventListener('click', collapseAll);
            
            // Back to editor button
            document.getElementById('back-to-editor-btn').addEventListener('click', () => {
                window.location.href = `{{ url_for('ontology_editor.index') }}?ontology_id={{ ontology_id }}`;
            });
            
            // Refresh button
            document.getElementById('refresh-btn').addEventListener('click', () => {
                loadOntologyHierarchy('{{ ontology_id }}');
            });
        }
        
        function loadOntologyHierarchy(ontologyId) {
            // Show loading indicator
            d3.select('#visualization-svg-container').html('<div style="text-align: center; padding: 20px;">Loading ontology data...</div>');
            
            // Fetch the hierarchy data from the API
            fetch(`{{ url_for('ontology_editor.api.get_ontology_hierarchy', ontology_id=0) }}`.replace('0', ontologyId))
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Store the data globally
                    ontologyHierarchy = data.hierarchy;
                    
                    // Render the visualization
                    renderVisualization();
                })
                .catch(error => {
                    console.error('Error loading ontology hierarchy:', error);
                    d3.select('#visualization-svg-container').html(`
                        <div style="text-align: center; padding: 20px; color: red;">
                            <p><strong>Error loading ontology data:</strong></p>
                            <p>${error.message}</p>
                            <p>Please try refreshing the page or check your connection.</p>
                        </div>
                    `);
                });
        }
        
        function renderVisualization() {
            if (!ontologyHierarchy) return;
            
            if (currentView === 'hierarchical') {
                renderHierarchicalView();
            } else {
                renderCategorizedView();
            }
        }
        
        function redrawVisualization() {
            // Clear current visualization
            d3.select('#visualization-svg-container').html('');
            
            // Redraw
            renderVisualization();
        }
        
        function switchViewType(viewType) {
            // Update button states
            document.getElementById('hierarchical-view-btn').classList.toggle('active', viewType === 'hierarchical');
            document.getElementById('categorized-view-btn').classList.toggle('active', viewType === 'categorized');
            
            // Update view
            currentView = viewType;
            redrawVisualization();
        }
        
        function filterByType(filterType) {
            currentFilter = filterType;
            redrawVisualization();
        }
        
        function shouldIncludeNode(node) {
            // Always show root node
            if (node.type === 'root') return true;
            
            // Apply current filter
            if (currentFilter === 'all') return true;
            
            // Filter by entity type or ontology type
            if (currentFilter === 'bfo') {
                return node.type === 'bfo' || node.type === 'bfo-aligned';
            }
            
            // Check if node name contains the filter type (e.g., Role, Condition)
            // or if node has a data-entity-type attribute that matches
            if (node.name.includes(currentFilter) || node.entity_type === currentFilter) {
                return true;
            }
            
            return false;
        }
        
        function processHierarchyForDisplay(rootNode, depth = 0) {
            if (!rootNode) return null;
            
            // Apply depth filter
            if (depth > maxDepth) {
                // Check if this node has children
                if (rootNode.children && rootNode.children.length > 0) {
                    // Mark as collapsed but don't process children
                    return { ...rootNode, _children: rootNode.children, children: null };
                }
                return rootNode;
            }
            
            // Process children recursively
            if (rootNode.children && rootNode.children.length > 0) {
                const processedChildren = rootNode.children
                    .map(child => processHierarchyForDisplay(child, depth + 1))
                    .filter(Boolean); // Remove null items
                
                if (processedChildren.length === 0) {
                    // No children after filtering
                    return { ...rootNode, children: null };
                }
                
                return { ...rootNode, children: processedChildren };
            }
            
            return rootNode;
        }
        
        function renderHierarchicalView() {
            const container = d3.select('#visualization-svg-container');
            container.html(''); // Clear container
            
            // Set dimensions
            const width = container.node().getBoundingClientRect().width;
            const height = 600;
            
            // Create SVG
            const svg = container.append('svg')
                .attr('width', width)
                .attr('height', height)
                .append('g')
                .attr('transform', `translate(${width / 3}, ${height / 2})`);
            
            // Define hierarchy layout
            const tree = d3.tree()
                .size([height, width - 160]); // Horizontal layout
            
            // Process hierarchy for filtering and display
            const processedRoot = processHierarchyForDisplay(ontologyHierarchy);
            
            if (!processedRoot) {
                container.html('<div style="text-align: center; padding: 20px;">No data available for visualization.</div>');
                return;
            }
            
            // Create hierarchy from the processed data
            const root = d3.hierarchy(processedRoot);
            
            // Compute the new tree layout
            tree(root);
            
            // Add links
            const links = svg.selectAll('.link')
                .data(root.links())
                .enter().append('path')
                .attr('class', 'link')
                .attr('d', d3.linkHorizontal()
                    .x(d => d.y)
                    .y(d => d.x));
            
            // Add nodes
            const nodes = svg.selectAll('.node')
                .data(root.descendants())
                .enter().append('g')
                .attr('class', d => `node node-${d.data.type}` + 
                      (d.data.entity_type ? ` node-type-${d.data.entity_type}` : ''))
                .attr('transform', d => `translate(${d.y},${d.x})`)
                .on('click', toggleNode)
                .on('mouseover', showTooltip)
                .on('mouseout', hideTooltip);
            
            // Add node circles
            nodes.append('circle')
                .attr('r', 8);
            
            // Add node labels
            nodes.append('text')
                .attr('dy', '.31em')
                .attr('x', d => d.children || d._children ? -12 : 12)
                .style('text-anchor', d => d.children || d._children ? 'end' : 'start')
                .text(d => d.data.name)
                .style('font-weight', d => d.data.type === 'root' ? 'bold' : 'normal');
            
            // Add expand/collapse indicators
            nodes.filter(d => d._children || d.children)
                .append('text')
                .attr('class', 'node-toggle')
                .attr('dy', 3) // Align with circle vertically
                .attr('dx', d => d.children ? -20 : -24) // Position left of circle
                .text(d => d.children ? '−' : '+') // Minus for expand, plus for collapse
                .style('font-size', '16px')
                .style('cursor', 'pointer')
                .style('font-weight', 'bold');
        }
        
        function renderCategorizedView() {
            const container = d3.select('#visualization-svg-container');
            container.html(''); // Clear container
            
            // Set dimensions
            const width = container.node().getBoundingClientRect().width;
            const height = 600;
            
            // Create SVG
            const svg = container.append('svg')
                .attr('width', width)
                .attr('height', height)
                .append('g')
                .attr('transform', `translate(${width / 4}, ${height / 2})`);
            
            // Define hierarchy layout
            const tree = d3.tree()
                .size([height, width - 160]); // Horizontal layout
            
            // Create categorized hierarchy
            const categorizedRoot = createCategorizedHierarchy(ontologyHierarchy);
            if (!categorizedRoot || !categorizedRoot.children || categorizedRoot.children.length === 0) {
                container.html('<div style="text-align: center; padding: 20px;">No data available for categorized view.</div>');
                return;
            }
            
            // Process hierarchy for filtering and display
            const processedRoot = processHierarchyForDisplay(categorizedRoot);
            
            // Create hierarchy from the processed data
            const root = d3.hierarchy(processedRoot);
            
            // Compute the new tree layout
            tree(root);
            
            // Add links
            const links = svg.selectAll('.link')
                .data(root.links())
                .enter().append('path')
                .attr('class', 'link')
                .attr('d', d3.linkHorizontal()
                    .x(d => d.y)
                    .y(d => d.x));
            
            // Add nodes
            const nodes = svg.selectAll('.node')
                .data(root.descendants())
                .enter().append('g')
                .attr('class', d => {
                    const nodeType = d.data.type === 'category' ? d.data.name : d.data.type;
                    return `node node-${d.data.type}` + 
                           (nodeType ? ` node-type-${nodeType}` : '');
                })
                .attr('transform', d => `translate(${d.y},${d.x})`)
                .on('click', toggleNode)
                .on('mouseover', showTooltip)
                .on('mouseout', hideTooltip);
            
            // Add node circles
            nodes.append('circle')
                .attr('r', 8);
            
            // Add node labels
            nodes.append('text')
                .attr('dy', '.31em')
                .attr('x', d => d.children || d._children ? -12 : 12)
                .style('text-anchor', d => d.children || d._children ? 'end' : 'start')
                .text(d => d.data.name)
                .style('font-weight', d => d.data.type === 'category' ? 'bold' : 'normal');
            
            // Add expand/collapse indicators
            nodes.filter(d => d._children || d.children)
                .append('text')
                .attr('class', 'node-toggle')
                .attr('dy', 3) // Align with circle vertically
                .attr('dx', d => d.children ? -20 : -24) // Position left of circle
                .text(d => d.children ? '−' : '+') // Minus for expand, plus for collapse
                .style('font-size', '16px')
                .style('cursor', 'pointer')
                .style('font-weight', 'bold');
        }
        
        function createCategorizedHierarchy(originalHierarchy) {
            if (!originalHierarchy) return null;
            
            // Create categories
            const categories = {
                'Role': {
                    name: 'Role',
                    type: 'category',
                    entity_type: 'Role',
                    description: 'Roles in the ontology',
                    children: []
                },
                'Condition': {
                    name: 'Condition',
                    type: 'category',
                    entity_type: 'Condition',
                    description: 'Conditions in the ontology',
                    children: []
                },
                'Resource': {
                    name: 'Resource',
                    type: 'category',
                    entity_type: 'Resource',
                    description: 'Resources in the ontology',
                    children: []
                },
                'Event': {
                    name: 'Event',
                    type: 'category',
                    entity_type: 'Event',
                    description: 'Events in the ontology',
                    children: []
                },
                'Action': {
                    name: 'Action',
                    type: 'category',
                    entity_type: 'Action',
                    description: 'Actions in the ontology',
                    children: []
                },
                'Other': {
                    name: 'Other',
                    type: 'category',
                    description: 'Other entities in the ontology',
                    children: []
                }
            };
            
            // Function to find all entities matching specific types
            function findEntitiesByPattern(node, patterns) {
                const results = [];
                
                // Check if current node matches
                if (node.name && patterns.some(pattern => node.name.includes(pattern))) {
                    results.push(node);
                }
                
                // Recursively check children
                if (node.children && node.children.length > 0) {
                    for (const child of node.children) {
                        results.push(...findEntitiesByPattern(child, patterns));
                    }
                }
                
                return results;
            }
            
            // Find entities for each category
            if (originalHierarchy.children && originalHierarchy.children.length > 0) {
                categories.Role.children = findEntitiesByPattern(originalHierarchy, ['Role']);
                categories.Condition.children = findEntitiesByPattern(originalHierarchy, ['Condition']);
                categories.Resource.children = findEntitiesByPattern(originalHierarchy, ['Resource']);
                categories.Event.children = findEntitiesByPattern(originalHierarchy, ['Event']);
                categories.Action.children = findEntitiesByPattern(originalHierarchy, ['Action']);
                
                // Add entity type to each node
                categories.Role.children.forEach(node => node.entity_type = 'Role');
                categories.Condition.children.forEach(node => node.entity_type = 'Condition');
                categories.Resource.children.forEach(node => node.entity_type = 'Resource');
                categories.Event.children.forEach(node => node.entity_type = 'Event');
                categories.Action.children.forEach(node => node.entity_type = 'Action');
            }
            
            // Create root object
            const root = {
                name: originalHierarchy.name,
                type: 'root',
                description: originalHierarchy.description || 'Ontology root',
                children: Object.values(categories).filter(cat => cat.children.length > 0)
            };
            
            return root;
        }
        
        function toggleNode(event, d) {
            if (d.children) {
                d._children = d.children;
                d.children = null;
            } else if (d._children) {
                d.children = d._children;
                d._children = null;
            }
            
            // Redraw the visualization
            redrawVisualization();
        }
        
        function showTooltip(event, d) {
            const tooltipContent = `
                <div style="font-weight: bold;">${d.data.name}</div>
                ${d.data.description ? `<div style="margin-top: 5px;">${d.data.description}</div>` : ''}
                ${d.data.uri ? `<div style="margin-top: 5px; font-size: 11px; opacity: 0.8;">${d.data.uri}</div>` : ''}
            `;
            
            tooltip.transition()
                .duration(200)
                .style("opacity", .9);
            
            tooltip.html(tooltipContent)
                .style("left", (event.pageX + 15) + "px")
                .style("top", (event.pageY - 28) + "px");
        }
        
        function hideTooltip() {
            tooltip.transition()
                .duration(500)
                .style("opacity", 0);
        }
        
        function expandAll() {
            expandCollapseAll(true);
        }
        
        function collapseAll() {
            expandCollapseAll(false);
        }
        
        function expandCollapseAll(expand) {
            function processNode(node) {
                if (!node) return;
                
                if (expand) {
                    // Expand: Move _children to children
                    if (node._children) {
                        node.children = node._children;
                        node._children = null;
                    }
                    
                    // Process children
                    if (node.children) {
                        node.children.forEach(processNode);
                    }
                } else {
                    // Collapse: Process children first (depth-first)
                    if (node.children) {
                        node.children.forEach(processNode);
                        
                        // Then collapse this node
                        node._children = node.children;
                        node.children = null;
                    }
                }
            }
            
            // Start with the current view's root
            const rootData = currentView === 'hierarchical' 
                ? ontologyHierarchy 
                : createCategorizedHierarchy(ontologyHierarchy);
                
            processNode(rootData);
            
            // Redraw
            redrawVisualization();
        }
        
        function applyZoom(zoomLevel) {
            const svg = d3.select('#visualization-svg-container svg g');
            svg.attr('transform', `translate(${d3.select('#visualization-svg-container
