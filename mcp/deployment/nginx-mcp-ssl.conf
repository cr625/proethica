# Nginx configuration for MCP server with SSL
# Place in /etc/nginx/sites-available/mcp.proethica.org

# Rate limiting zone
limit_req_zone $binary_remote_addr zone=mcp_api:10m rate=30r/m;
limit_req_zone $binary_remote_addr zone=mcp_health:10m rate=60r/m;

# Upstream definition
upstream mcp_backend {
    server 127.0.0.1:5002 fail_timeout=10s;
    keepalive 32;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name mcp.proethica.org;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name mcp.proethica.org;

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/mcp.proethica.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mcp.proethica.org/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/mcp.proethica.org/chain.pem;
    
    # SSL parameters
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Remove server tokens
    server_tokens off;
    
    # Logging
    access_log /var/log/nginx/mcp.proethica.org.access.log combined;
    error_log /var/log/nginx/mcp.proethica.org.error.log warn;
    
    # Health check endpoint (higher rate limit)
    location = /health {
        limit_req zone=mcp_health burst=5 nodelay;
        
        proxy_pass http://mcp_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        access_log off;
        
        # Shorter timeout for health checks
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }
    
    # API endpoints
    location / {
        # Rate limiting
        limit_req zone=mcp_api burst=10 nodelay;
        
        # CORS headers (adjust origins as needed)
        set $cors_origin "";
        if ($http_origin ~* (https://proethica\.org|https://www\.proethica\.org|http://localhost:3000)) {
            set $cors_origin $http_origin;
        }
        
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header Access-Control-Max-Age 86400 always;
        
        # Handle preflight requests
        if ($request_method = OPTIONS) {
            return 204;
        }
        
        # Proxy settings
        proxy_pass http://mcp_backend;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Connection settings
        proxy_set_header Connection "";
        proxy_buffering off;
        proxy_request_buffering off;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /50x.html;
    }
    
    # Error pages
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# IP-based access (optional, for admin access)
server {
    listen 127.0.0.1:5002;
    server_name localhost;
    
    location / {
        proxy_pass http://127.0.0.1:5002;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
    }
}