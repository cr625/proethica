name: Monitor MCP Server

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check MCP server health
      id: health
      env:
        MCP_URL: ${{ secrets.MCP_URL || 'https://mcp.proethica.org' }}
      run: |
        echo "🏥 Checking MCP server health at $MCP_URL"
        
        # Initialize status
        STATUS="healthy"
        FAILED_CHECKS=""
        
        # Function to check endpoint
        check_endpoint() {
          local endpoint=$1
          local description=$2
          echo -n "Checking $description... "
          
          if curl -f -m 10 "$MCP_URL$endpoint" > /dev/null 2>&1; then
            echo "✅ OK"
            return 0
          else
            echo "❌ FAILED"
            STATUS="unhealthy"
            FAILED_CHECKS="${FAILED_CHECKS}${description} ($endpoint)\n"
            return 1
          fi
        }
        
        # Run health checks
        check_endpoint "/health" "Basic health"
        check_endpoint "/list_tools" "MCP tools"
        check_endpoint "/ontology/sources" "Ontology sources"
        
        # Performance check
        echo -n "Checking response time... "
        START_TIME=$(date +%s%3N)
        if curl -f -m 10 "$MCP_URL/health" > /dev/null 2>&1; then
          END_TIME=$(date +%s%3N)
          RESPONSE_TIME=$((END_TIME - START_TIME))
          
          if [ $RESPONSE_TIME -lt 1000 ]; then
            echo "✅ ${RESPONSE_TIME}ms"
          elif [ $RESPONSE_TIME -lt 3000 ]; then
            echo "⚠️ ${RESPONSE_TIME}ms (slow)"
          else
            echo "❌ ${RESPONSE_TIME}ms (very slow)"
            STATUS="degraded"
          fi
        else
          echo "❌ No response"
          STATUS="unhealthy"
        fi
        
        # Set outputs
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "failed_checks<<EOF" >> $GITHUB_OUTPUT
        echo -e "$FAILED_CHECKS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Exit with error if unhealthy
        if [ "$STATUS" = "unhealthy" ]; then
          exit 1
        fi
    
    - name: Create issue if unhealthy
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ steps.health.outputs.status }}';
          const failedChecks = `${{ steps.health.outputs.failed_checks }}`;
          const timestamp = new Date().toISOString();
          
          // Check if there's already an open issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['mcp-health', 'automated'],
            state: 'open'
          });
          
          if (issues.data.length === 0) {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 MCP Server Health Check Failed - ${timestamp}`,
              body: `## MCP Server Health Check Failed
              
              **Time:** ${timestamp}
              **Status:** ${status}
              
              ### Failed Checks:
              ${failedChecks || 'Unknown failure'}
              
              ### Action Required:
              1. Check server logs: \`ssh chris@proethica.org 'tail -100 /home/chris/proethica/mcp-server/logs/mcp_*.log'\`
              2. Check server status: \`./mcp/deployment/health-check.sh production\`
              3. Restart if needed: \`./mcp/deployment/deploy-mcp-simple-branch.sh production\`
              
              ### Automated Recovery:
              The system will attempt to auto-restart the server if this issue remains open for more than 30 minutes.
              
              ---
              *This issue was automatically created by the MCP monitoring workflow.*`,
              labels: ['mcp-health', 'automated', 'urgent']
            });
          } else {
            // Update existing issue
            const issue = issues.data[0];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `## Health Check Still Failing
              
              **Time:** ${timestamp}
              **Status:** ${status}
              
              ### Failed Checks:
              ${failedChecks || 'Unknown failure'}
              
              The MCP server is still experiencing issues.`
            });
          }
    
    - name: Close issue if healthy
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          // Check for open health issues
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['mcp-health', 'automated'],
            state: 'open'
          });
          
          // Close all open health issues
          for (const issue of issues.data) {
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `✅ MCP server health check passed. The server has recovered.
              
              **Time:** ${new Date().toISOString()}
              
              ---
              *This issue was automatically closed by the MCP monitoring workflow.*`
            });
          }
    
    - name: Send notification
      if: failure()
      continue-on-error: true
      run: |
        # This is where you could add notifications via:
        # - Slack webhook
        # - Email
        # - Discord
        # - PagerDuty
        # Example:
        # curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
        #   -H 'Content-Type: application/json' \
        #   -d '{"text":"🚨 MCP Server health check failed!"}'
        
        echo "Notification would be sent here"