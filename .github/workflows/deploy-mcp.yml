name: Deploy MCP Server

on:
  push:
    branches: [ main, develop, guidelines-enhancement ]
    paths:
      - 'mcp/**'
      - 'requirements-mcp.txt'
      - 'requirements.txt'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment regardless of changes'
        required: false
        default: 'false'
        type: boolean
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy-mcp:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need previous commit for change detection
    
    - name: Check for MCP changes
      id: changes
      run: |
        if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Force deployment requested"
        else
          # Check if MCP files changed
          if git diff --name-only HEAD^ HEAD | grep -E '^mcp/|^requirements-mcp.txt|^requirements.txt'; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "MCP files changed, deployment needed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No MCP changes detected"
          fi
        fi
    
    - name: Set up Python
      if: steps.changes.outputs.changed == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Cache Python dependencies
      if: steps.changes.outputs.changed == 'true'
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Validate MCP server
      if: steps.changes.outputs.changed == 'true'
      run: |
        # Install dependencies
        if [ -f "requirements-mcp.txt" ]; then
          pip install -r requirements-mcp.txt
        else
          pip install -r requirements.txt
        fi
        
        # Syntax validation
        python -m py_compile mcp/enhanced_ontology_server_with_guidelines.py
        echo "‚úÖ MCP server syntax validation passed"
        
        # Import test
        python -c "import sys; sys.path.insert(0, 'mcp'); from enhanced_ontology_server_with_guidelines import OntologyMCPServer"
        echo "‚úÖ MCP server import test passed"
    
    - name: Set up SSH
      if: steps.changes.outputs.changed == 'true'
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DROPLET_SSH_KEY }}
    
    - name: Deploy to production
      if: steps.changes.outputs.changed == 'true'
      env:
        SSH_HOST: ${{ secrets.DROPLET_HOST }}
        SSH_USER: ${{ secrets.DROPLET_USER }}
        MCP_AUTH_TOKEN: ${{ secrets.MCP_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DEPLOY_BRANCH: ${{ github.ref_name }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
      run: |
        # Create deployment script
        cat > deploy_mcp.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Color codes for output
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        NC='\033[0m'
        
        echo -e "${BLUE}üöÄ Starting MCP server deployment...${NC}"
        echo -e "${YELLOW}Branch: ${DEPLOY_BRANCH}${NC}"
        echo -e "${YELLOW}Environment: ${ENVIRONMENT}${NC}"
        
        # Configuration
        DEPLOY_DIR="/home/chris"
        REPO_DIR="$DEPLOY_DIR/proethica-mcp"
        MCP_DIR="$DEPLOY_DIR/mcp-server"
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        RELEASE_DIR="$MCP_DIR/releases/$TIMESTAMP"
        PREVIOUS_RELEASE=""
        
        # Port configuration based on environment
        if [ "$ENVIRONMENT" = "production" ]; then
          MCP_PORT=5002
        else
          MCP_PORT=5003
        fi
        
        # Create directory structure
        mkdir -p "$MCP_DIR"/{current,releases,shared,logs,config}
        
        # Get current release for rollback
        if [ -L "$MCP_DIR/current" ]; then
          PREVIOUS_RELEASE=$(readlink "$MCP_DIR/current")
        fi
        
        # Create new release directory
        mkdir -p "$RELEASE_DIR"
        
        # Update repository to correct branch
        echo -e "${YELLOW}üì• Updating repository to ${DEPLOY_BRANCH} branch...${NC}"
        cd "$REPO_DIR"
        git fetch origin
        git checkout "${DEPLOY_BRANCH}" || git checkout -b "${DEPLOY_BRANCH}" "origin/${DEPLOY_BRANCH}"
        git pull origin "${DEPLOY_BRANCH}"
        
        # Show current commit for verification
        echo -e "${BLUE}Current commit: $(git log -1 --oneline)${NC}"
        
        # Copy MCP files from repository
        echo -e "${YELLOW}üìã Copying MCP files...${NC}"
        cp -r mcp/* "$RELEASE_DIR/"
        
        # Copy requirements file
        if [ -f "requirements-mcp.txt" ]; then
          cp requirements-mcp.txt "$RELEASE_DIR/"
        else
          cp requirements.txt "$RELEASE_DIR/"
        fi
        
        # Set up Python environment for new release
        cd "$RELEASE_DIR"
        echo -e "${YELLOW}üêç Setting up Python environment...${NC}"
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        
        # Install requirements
        if [ -f "requirements-mcp.txt" ]; then
          pip install -r requirements-mcp.txt
        else
          pip install -r requirements.txt
        fi
        
        # Create/update environment file
        echo -e "${YELLOW}‚öôÔ∏è Setting up environment configuration...${NC}"
        
        # Copy existing .env if it exists, otherwise create new one
        if [ -f "$MCP_DIR/current/.env" ]; then
          cp "$MCP_DIR/current/.env" .env
          # Update specific values
          sed -i "s/^MCP_SERVER_PORT=.*/MCP_SERVER_PORT=$MCP_PORT/" .env
          sed -i "s/^ENVIRONMENT=.*/ENVIRONMENT=$ENVIRONMENT/" .env
        else
          cat > .env << ENVEOF
        MCP_SERVER_PORT=$MCP_PORT
        USE_MOCK_GUIDELINE_RESPONSES=false
        DATABASE_URL=${DATABASE_URL}
        ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
        MCP_AUTH_TOKEN=${MCP_AUTH_TOKEN}
        ENVIRONMENT=$ENVIRONMENT
        PYTHONPATH=$REPO_DIR
        ENVEOF
        fi
        
        # Test import with proper Python path
        echo -e "${YELLOW}üß™ Testing MCP server import...${NC}"
        export PYTHONPATH="$REPO_DIR:$PYTHONPATH"
        if python -c "import sys; sys.path.insert(0, '.'); from enhanced_ontology_server_with_guidelines import OntologyMCPServer" 2>/dev/null; then
          echo -e "${GREEN}‚úÖ MCP server import test passed${NC}"
        else
          echo -e "${RED}‚ùå MCP server import test failed${NC}"
          exit 1
        fi
        
        # Start new server on alternate port for testing
        echo -e "${YELLOW}üîÑ Starting new MCP server on test port $((MCP_PORT + 100))...${NC}"
        MCP_SERVER_PORT=$((MCP_PORT + 100)) nohup python enhanced_ontology_server_with_guidelines.py > ../logs/mcp_test_$TIMESTAMP.log 2>&1 &
        NEW_PID=$!
        sleep 10
        
        # Health check new server
        MAX_RETRIES=6
        RETRY_COUNT=0
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if curl -s -f http://localhost:$((MCP_PORT + 100))/health 2>/dev/null; then
            echo -e "${GREEN}‚úÖ New MCP server health check passed${NC}"
            break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Health check attempt $RETRY_COUNT/$MAX_RETRIES failed, retrying in 5s..."
              sleep 5
            else
              echo -e "${RED}‚ùå New MCP server health check failed${NC}"
              kill $NEW_PID || true
              exit 1
            fi
          fi
        done
        
        # Stop test server
        kill $NEW_PID || true
        
        # Stop old MCP server
        echo -e "${YELLOW}‚èπÔ∏è Stopping old MCP server...${NC}"
        pkill -f "enhanced_ontology_server_with_guidelines.py.*port.*$MCP_PORT" || true
        sleep 3
        
        # Update symlink to new release
        ln -sfn "$RELEASE_DIR" "$MCP_DIR/current"
        
        # Start new server on primary port
        echo -e "${YELLOW}‚ñ∂Ô∏è Starting new MCP server on port $MCP_PORT...${NC}"
        cd "$MCP_DIR/current"
        source venv/bin/activate
        export PYTHONPATH="$REPO_DIR:$PYTHONPATH"
        nohup python enhanced_ontology_server_with_guidelines.py > ../logs/mcp_$TIMESTAMP.log 2>&1 &
        SERVER_PID=$!
        
        # Final health check
        echo -e "${YELLOW}üè• Performing final health check...${NC}"
        sleep 10
        FINAL_CHECK_PASSED=false
        for i in {1..6}; do
          if curl -s -f http://localhost:$MCP_PORT/health 2>/dev/null; then
            echo -e "${GREEN}‚úÖ MCP server final health check passed${NC}"
            FINAL_CHECK_PASSED=true
            break
          else
            echo "Final health check attempt $i/6 failed, retrying in 5s..."
            sleep 5
          fi
        done
        
        if [ "$FINAL_CHECK_PASSED" = false ]; then
          echo -e "${RED}‚ùå MCP server final health check failed - initiating rollback${NC}"
          
          # Rollback
          if [ -n "$PREVIOUS_RELEASE" ] && [ -d "$PREVIOUS_RELEASE" ]; then
            echo -e "${YELLOW}üîÑ Rolling back to previous release...${NC}"
            
            # Stop failed server
            pkill -f "enhanced_ontology_server_with_guidelines.py" || true
            
            # Restore previous symlink
            ln -sfn "$PREVIOUS_RELEASE" "$MCP_DIR/current"
            
            # Start previous version
            cd "$MCP_DIR/current"
            source venv/bin/activate
            export PYTHONPATH="$REPO_DIR:$PYTHONPATH"
            nohup python enhanced_ontology_server_with_guidelines.py > ../logs/mcp_rollback_$TIMESTAMP.log 2>&1 &
            
            sleep 10
            if curl -s -f http://localhost:$MCP_PORT/health 2>/dev/null; then
              echo -e "${GREEN}‚úÖ Rollback successful${NC}"
            else
              echo -e "${RED}‚ùå Rollback failed - manual intervention required${NC}"
            fi
          fi
          
          exit 1
        fi
        
        # Cleanup old releases (keep last 5)
        echo -e "${YELLOW}üßπ Cleaning up old releases...${NC}"
        cd "$MCP_DIR/releases"
        ls -1t | tail -n +6 | xargs rm -rf 2>/dev/null || true
        
        echo -e "${GREEN}üéâ MCP server deployment completed successfully!${NC}"
        echo -e "${BLUE}üìä Server: http://localhost:$MCP_PORT${NC}"
        echo -e "${BLUE}üìã Logs: $MCP_DIR/logs/mcp_$TIMESTAMP.log${NC}"
        echo -e "${BLUE}üåø Branch: ${DEPLOY_BRANCH}${NC}"
        echo -e "${BLUE}üíæ Commit: $(cd $REPO_DIR && git rev-parse --short HEAD)${NC}"
        EOF
        
        # Execute deployment
        ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST 'bash -s' < deploy_mcp.sh
    
    - name: Post-deployment health check
      if: steps.changes.outputs.changed == 'true'
      env:
        SSH_HOST: ${{ secrets.DROPLET_HOST }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
      run: |
        # Determine port based on environment
        if [ "$ENVIRONMENT" = "production" ]; then
          MCP_PORT=5002
        else
          MCP_PORT=5003
        fi
        
        echo "üè• Running post-deployment health check..."
        
        # Wait for server to stabilize
        sleep 10
        
        # Perform health checks
        HEALTH_PASSED=true
        
        # Basic health endpoint
        if curl -f http://$SSH_HOST:$MCP_PORT/health; then
          echo "‚úÖ Health endpoint check passed"
        else
          echo "‚ùå Health endpoint check failed"
          HEALTH_PASSED=false
        fi
        
        # Tools endpoint
        if curl -f http://$SSH_HOST:$MCP_PORT/list_tools > /dev/null 2>&1; then
          echo "‚úÖ Tools endpoint check passed"
        else
          echo "‚ùå Tools endpoint check failed"
          HEALTH_PASSED=false
        fi
        
        # Ontology endpoint
        if curl -f http://$SSH_HOST:$MCP_PORT/ontology/sources > /dev/null 2>&1; then
          echo "‚úÖ Ontology endpoint check passed"
        else
          echo "‚ùå Ontology endpoint check failed"
          HEALTH_PASSED=false
        fi
        
        if [ "$HEALTH_PASSED" = false ]; then
          echo "‚ùå Post-deployment health checks failed"
          exit 1
        else
          echo "‚úÖ All post-deployment health checks passed"
        fi
    
    - name: Deployment notification
      if: always() && steps.changes.outputs.changed == 'true'
      env:
        SSH_HOST: ${{ secrets.DROPLET_HOST }}
        SSH_USER: ${{ secrets.DROPLET_USER }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ MCP server deployed successfully!"
          echo "üìä Environment: $ENVIRONMENT"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üíæ Commit: ${{ github.sha }}"
          echo "üîó Server: https://mcp.proethica.org"
          echo "üìã View logs: ssh $SSH_USER@$SSH_HOST 'tail -f /home/chris/proethica/mcp-server/logs/mcp_*.log'"
        else
          echo "‚ùå MCP server deployment failed!"
          echo "Please check the workflow logs for details."
        fi