name: Deploy MCP Server (Simple)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'mcp/**'
      - 'requirements-mcp.txt'
      - 'requirements.txt'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment regardless of changes'
        required: false
        default: 'false'
        type: boolean

jobs:
  deploy-mcp:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check for MCP changes
      id: changes
      run: |
        if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Force deployment requested"
        else
          # Check if MCP files changed
          if git diff --name-only HEAD^ HEAD | grep -E '^mcp/|^requirements-mcp.txt|^requirements.txt'; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "MCP files changed, deployment needed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No MCP changes detected"
          fi
        fi
    
    - name: Set up Python
      if: steps.changes.outputs.changed == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Validate MCP server
      if: steps.changes.outputs.changed == 'true'
      run: |
        # Install dependencies
        if [ -f "requirements-mcp.txt" ]; then
          pip install -r requirements-mcp.txt
        else
          pip install -r requirements.txt
        fi
        
        # Syntax validation
        python -m py_compile mcp/enhanced_ontology_server_with_guidelines.py
        echo "✅ MCP server syntax validation passed"
        
        # Import test (with database mock for validation)
        python -c "
        import sys
        sys.path.insert(0, 'mcp')
        
        # Mock database dependencies for validation
        import unittest.mock
        with unittest.mock.patch('psycopg2.connect'):
            with unittest.mock.patch.dict('os.environ', {'USE_MOCK_GUIDELINE_RESPONSES': 'true'}):
                from enhanced_ontology_server_with_guidelines import OntologyMCPServer
                print('✅ MCP server import successful')
        "
        echo "✅ MCP server import test passed"
    
    - name: Set up SSH
      if: steps.changes.outputs.changed == 'true'
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DROPLET_SSH_KEY }}
    
    - name: Deploy to production
      if: steps.changes.outputs.changed == 'true'
      env:
        SSH_HOST: ${{ secrets.DROPLET_HOST }}
        SSH_USER: ${{ secrets.DROPLET_USER }}
        DEPLOY_BRANCH: ${{ github.ref_name }}
      run: |
        echo "🚀 Starting simple MCP deployment..."
        echo "Branch: $DEPLOY_BRANCH"
        echo "Host: $SSH_HOST"
        
        # Execute simple deployment via SSH
        ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
          set -e
          
          echo "📦 Updating repository..."
          cd /home/chris/proethica-repo
          git fetch origin
          git checkout develop
          git pull origin develop
          echo "✅ Repository updated"
          
          echo "📄 Copying MCP files..."
          cp -r /home/chris/proethica-repo/mcp/* /home/chris/proethica-mcp/mcp/
          cp /home/chris/proethica-repo/requirements-mcp.txt /home/chris/proethica-mcp/
          echo "✅ MCP files updated"
          
          echo "🔄 Restarting MCP service..."
          sudo systemctl restart proethica-mcp-home.service
          
          echo "⏳ Waiting for service to start..."
          sleep 10
          
          echo "🏥 Checking service status..."
          if systemctl is-active --quiet proethica-mcp-home.service; then
            echo "✅ MCP service is running"
          else
            echo "❌ MCP service failed to start"
            systemctl status proethica-mcp-home.service --no-pager
            exit 1
          fi
        EOF
        
        echo "🏥 Testing MCP server health from external..."
        sleep 5
        
        # Test health endpoint
        for i in {1..6}; do
          if curl -s https://mcp.proethica.org/health | grep -q "ok"; then
            echo "✅ MCP server health check passed!"
            echo "🎉 Deployment completed successfully!"
            exit 0
          fi
          echo "Health check attempt $i/6 failed, retrying in 10s..."
          sleep 10
        done
        
        echo "❌ MCP server health check failed after 6 attempts"
        exit 1
    
    - name: Deployment notification
      if: always() && steps.changes.outputs.changed == 'true'
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ MCP server deployed successfully!"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "💾 Commit: ${{ github.sha }}"
          echo "🔗 Server: https://mcp.proethica.org"
        else
          echo "❌ MCP server deployment failed"
          echo "Check the logs above for details"
        fi