{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Start MCP Server with Live LLM",
            "type": "shell",
            "command": "bash",
            "args": ["-lc", "scripts/start_mcp_server_with_env.sh"],
            "isBackground": true,
            "problemMatcher": {
                "pattern": {
                    "regexp": "Server started at http://localhost:(\\d+)",
                    "line": 1
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "^.*Starting server.*$",
                    "endsPattern": "^.*Server started at http://localhost:.*$"
                }
            },
            "presentation": {
                "reveal": "always",
                "panel": "new"
            },
            "options": {
                "env": {
                    "USE_MOCK_GUIDELINE_RESPONSES": "false"
                }
            }
        },
        {
            "label": "Run Live LLM Integration Tests",
            "type": "shell",
            "command": "./test_live_llm_integration.py",
            "args": [
                "--verbose"
            ],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            "options": {
                "env": {
                    "USE_MOCK_GUIDELINE_RESPONSES": "false"
                }
            }
        },
        {
            "label": "Start Flask App",
            "type": "shell",
            "command": "${workspaceFolder}/venv/bin/python",
            "args": ["run.py"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            },
            "options": {
                "env": {
                    "PYTHONPATH": "${workspaceFolder}",
                    "PATH": "${env:PATH}",
                    "USE_MOCK_GUIDELINE_RESPONSES": "false",
                    "FORCE_MOCK_LLM": "false",
                    "ENVIRONMENT": "development",
                    "DEBUG": "true",
                    "BYPASS_AUTH": "true",
                    "MCP_SERVER_PORT": "5001",
                    "MCP_SERVER_URL": "http://localhost:5001",
                    "SQLALCHEMY_DATABASE_URI": "postgresql://postgres:PASS@localhost:5433/ai_ethical_dm",
                    "SQLALCHEMY_TRACK_MODIFICATIONS": "false",
                    "DISABLE_LOCAL_EMBEDDINGS": "false",
                    "ALLOW_HF_DOWNLOAD": "true",
                    "EMBEDDINGS_DEVICE": "cpu",
                    "EMBEDDING_PROVIDER_PRIORITY": "openai,anthropic,google,local",
                    "EMBEDDING_MODEL": "text-embedding-3-small",
                    "ANTHROPIC_MODEL": "claude-sonnet-4-20250514"
                }
            },
            "problemMatcher": []
        },
        {
            "label": "Start Docker PostgreSQL",
            "type": "shell",
            "command": "docker",
            "args": ["compose", "up", "-d"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            },
            "problemMatcher": []
        },
        {
            "label": "Stop Docker PostgreSQL",
            "type": "shell",
            "command": "docker",
            "args": ["compose", "down"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            },
            "problemMatcher": []
        },
        {
            "label": "Test Database Connection",
            "type": "shell",
            "command": "docker",
            "args": ["exec", "proethica-postgres", "psql", "-U", "postgres", "-d", "ai_ethical_dm", "-c", "SELECT COUNT(*) FROM worlds;"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            },
            "problemMatcher": []
        },
        {
            "label": "Run Debug Test",
            "type": "shell",
            "command": "python3",
            "args": ["test_debug.py"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            },
            "options": {
                "env": {
                    "PYTHONPATH": "${workspaceFolder}:/home/chris/.local/lib/python3.12/site-packages",
                    "PATH": "${env:PATH}:/home/chris/.local/bin"
                }
            },
            "problemMatcher": []
        },
        {
            "label": "kill-python-processes",
            "type": "shell",
            "command": "pkill -f 'python.*app.py|mcp.*server|run_enhanced_mcp' || true",
            "presentation": {
                "reveal": "silent",
                "close": true
            },
            "problemMatcher": []
        },
        {
            "label": "kill-mcp-servers-all-ports",
            "type": "shell",
            "command": "bash",
            "args": ["-c", "echo '🔍 Killing any existing MCP servers...' && pkill -f 'mcp.*server|run_enhanced_mcp|enhanced_ontology_server' 2>/dev/null || true && sleep 1 && (command -v lsof >/dev/null 2>&1 && lsof -ti:5001,5002,5003 2>/dev/null | xargs -r kill -9 2>/dev/null || true) && sleep 1 && echo '✅ All MCP servers stopped and ports cleared'"],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "check-mcp-port-availability",
            "type": "shell", 
            "command": "bash",
            "args": ["-c", "PORT=${MCP_SERVER_PORT:-5001} && echo '🔍 Checking port '$PORT'...' && if command -v lsof >/dev/null 2>&1; then if lsof -ti:$PORT >/dev/null 2>&1; then echo '❌ Port '$PORT' is already in use. Killing process...' && lsof -ti:$PORT | xargs -r kill -9 && sleep 2; fi; else echo '⚠️  lsof not available, using pkill only'; pkill -f 'mcp.*server|run_enhanced_mcp|enhanced_ontology_server' 2>/dev/null || true; fi && echo '✅ Port '$PORT' is available'"],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "simple-kill-mcp-servers",
            "type": "shell",
            "command": "bash",
            "args": ["-c", "echo '🔍 Stopping MCP servers...' && pkill -f 'mcp.*server|run_enhanced_mcp|enhanced_ontology_server' 2>/dev/null || true && sleep 1 && echo '✅ MCP cleanup completed'"],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "python-cleanup-mcp-servers",
            "type": "shell",
            "command": "${workspaceFolder}/venv/bin/python",
            "args": ["${workspaceFolder}/scripts/cleanup_mcp_servers.py"],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "sleep",
            "type": "shell",
            "command": "sleep 2",
            "presentation": {
                "reveal": "silent",
                "close": true
            },
            "problemMatcher": []
        },
        {
            "label": "wait-for-mcp-startup",
            "type": "shell",
            "command": "echo",
            "args": ["🔄 Allowing time for MCP server to start..."],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": []
        }
        ,
        {
            "label": "Restore Latest Backup",
            "type": "shell",
            "command": "bash",
            "args": [
                "-lc",
                "bash backups/docker_restore.sh"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            },
            "problemMatcher": []
        }
    ]
}
